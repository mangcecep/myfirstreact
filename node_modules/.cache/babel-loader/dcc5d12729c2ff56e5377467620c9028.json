{"ast":null,"code":"var _jsxFileName = \"/Users/gmv/Documents/myfirstreact/src/index.js\";\nimport React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom'; //import './index.css';\n//import App from './App.css';\n\nimport Card from './components/components/Card'; // import * as serviceWorker from './serviceWorker';\n// const mysFirstElemennt = <h1>Hello React!</h1>\n// const myelement = (\n//     <table>\n//         <tr>\n//             <th>Name</th>\n//         </tr>\n//         <tr>\n//             <td>John</td>\n//         </tr>\n//         <tr>\n//             <td>Elsa</td>\n//         </tr>\n//     </table>\n// );\n// //use JSX\n// const myelement = <h1>I love JSX!</h1>\n//use non-JSX\n// const myelement = React.createElement('h1', {}, 'I dont use JSX!');\n// expression in JSX\n// const myelement = <h1>React is {5 + 5} times better with JSX</h1>\n// insert a large block HTML\n// const myelement = (\n//     <ul>\n//         <li>Apples</li>\n//         <li>Bananas</li>\n//         <li>Cherries</li>\n//     </ul>\n// );\n//one Top Level Element\n// const myelement = (\n//     <div>\n//         <h1>I am a Header.</h1>\n//         <h1>I am a Header too.</h1>\n//     </div>\n// );\n// element Must be CLose -> close empty element with /> if not that is error \n// i.e :\n//const myelement = <input type=\"text\">\n//it's mus be like this: \n// const myelement = <input type=\"text\"/>\n// function Car(){\n//     return <h2>Hi, I am also a Car!</h2>\n// }\n// class Car extends React.Component{\n//     constructor(){\n//         super();\n//         this.state = {color: \"red\"};\n//     }\n//     render(){\n//     return <h2>I am a {this.state.color} Car!</h2>\n//     }\n// }\n// class Car extends React.Component{\n//     render() {\n//         return <h2>I am a {this.props.color} Car!</h2>\n//     }\n// }\n// class Car extends React.Component{\n//     render() {\n//         return <h2>I am a Car!</h2>\n//     }\n// }\n// class Garage extends React.Component {\n//     render(){\n//         return (\n//             <div>\n//                 <h1>Who lives in my Garage?</h1>\n//                 <Car />\n//             </div>\n//         );\n//     }\n// }\n// class Car extends React.Component{\n//     render(){\n//         return <h2>I am a {this.props.brand}!</h2>\n//     }\n// }\n// const myelement = <Car brand=\"Ford\" />\n// class Card extends React.Component{\n//     render(){\n//         return <h1>ini Card</h1>\n//     }\n// }\n// class Myheader extends React.Component {\n//     render(){\n//         return (\n//             <div>\n//                 <h1 style={{backgroundColor: \"lightblue\"}}>Hello Style!</h1>\n//                 <p>add a little style!</p>\n//             </div>\n//         );\n//     }\n// }\n// class Myheader extends React.Component{\n//     render (){\n//     //     const mystyle = {\n//     //         color : \"white\",\n//     //         backgroundColor: \"DodgerBlue\",\n//     //         padding : \"10px\",\n//     //         fontFamily : \"Arial\"\n//     //     }\n//         return (\n//             <div>\n//                 <h1>Hello Style!</h1>\n//                 <p>add a little style!</p>\n//             </div>\n//         )\n//     }\n// }\n// class Car extends React.Component{\n//     render (){\n//         return <h2>I am a {this.props.brand}!</h2>\n//     }\n// }\n// const myelement = <Car brand=\"Ford\" />\n// class Car extends React.Component{\n//     render (){\n//         return <h2>I am a {this.props.brand}!</h2>\n//     }\n// }\n// class Garage extends React.Component {\n//     render(){\n//         return(\n//             <div>\n//                 <h1>Whi lives in my garage?</h1>\n//                 <Car brand=\"Ford\" />\n//             </div>\n//         );\n//     }\n// }\n// class Car extends React.Component{\n//     render (){\n//         return <h2>I am a {this.props.brand}!</h2>\n//     }\n// }\n// class Garage extends React.Component {\n//     render() {\n//         const carname =  \"Ford\";\n//         return (\n//             <div>\n//                 <h1>Who live in my garage?</h1>\n//                 <Car brand={carname} />\n//             </div>\n//         );\n//     }\n// }\n// class Car extends React.Component {\n//     render(){\n//         return <h2>I am a {this.props.brand.name}!</h2>\n//     }\n// }\n// class Garage extends React.Component {\n//     render(){\n//         const carinfo = {name : \"Ford\", model: \"Mustang\"};\n//         return(\n//             <div>\n//                 <h1>Who lives in my garage?</h1>\n//                 <Car brand={carinfo}/>\n//             </div>\n//         );\n//     }\n// }\n// class Car extends React.Component {\n//     constructor (props) {\n//         super (props);\n//     }\n//     render(){\n//     return <h2>I am a {this.props.model} !</h2>\n//     }\n// }\n// class Car extends React.Component {\n//     constructor (props) {\n//         super (props);\n//         this.state = {\n//             brand : \"Ford\",\n//             model : \"Mustang\",\n//             color : \"red\",\n//             year : 1964\n//         };\n//     }\n//     render(){\n//     return (\n//         <div>\n//             <h1>My {this.state.brand}</h1>\n//             <p>\n//                 it is a {this.state.color} <br />\n//                 {this.state.model} <br />\n//                 from {this.state.year}.\n//             </p>\n//         </div>\n//         );\n//     }\n// }\n// class Car extends React.Component {\n//     constructor (props) {\n//         super (props);\n//         this.state = {\n//             brand : \"Ford\",\n//             model : \"Mustang\",\n//             color : \"red\",\n//             year : 1964\n//         };\n//     }\n//     changeColor = () => {\n//         this.setState({color: \"blue\"});\n//     }\n//     render(){\n//     return (\n//         <div>\n//             <h1>My {this.state.brand}</h1>\n//             <p>\n//                 it is a {this.state.color} <br />\n//                 {this.state.model} <br />\n//                 from {this.state.year}.\n//             </p>\n//             <button type=\"button\" onClick={this.changeColor}>\n//                 Change Color\n//             </button>\n//         </div>\n//         );\n//     }\n// }\n// class Header extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {favoritecolor: \"red\"};\n//     }\n//     static getDerivedStateFromProps(props, state){\n//         return {favoritecolor: props.favcol};\n//     }\n//     render(){\n//         return (\n//             <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//         );\n//     }\n// }\n// class Header extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {favoritecolor: \"red\"};\n//     }\n//     componentDidMount(){\n//         setTimeout( () => {\n//             this.setState({favoritecolor: \"yellow\"})\n//         }, 1000 )\n//     }\n//     render(){\n//         return (\n//             <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//         );\n//     }\n// }\n// class  MyForm extends React.Component {\n//     render() {\n//         return (\n//             <form>\n//                 <h1>Hello</h1>\n//                 <p>Enter Your Name : </p>\n//                 <input \n//                     type=\"text\"\n//                 />\n//             </form>\n//         );\n//     }\n// }\n// class MyForm extends React.Component {\n//     constructor(props) {\n//             super(props) ;\n//             this.state =  {username: ''};\n//         }\n//         myChangeHandler = (event) => {\n//             this.setState({username: event.target.value});\n//         }\n//         render(){\n//             return(\n//                 <form>\n//                     <h1>Hello {this.state.username}</h1>\n//                     <p>Enter your name :</p>\n//                     <input \n//                         type='tect'\n//                         onChange={this.myChangeHandler}\n//                     />\n//                 </form>\n//             );\n//          }\n//     }\n\nclass Myform extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.myChangeHandler = event => {\n      this.setState({\n        username: event.target.value\n      });\n    };\n\n    this.state = {\n      username: ''\n    };\n  }\n\n  render() {\n    let header = '';\n\n    if (this.state.username) {\n      header = React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, \"Hello \", this.state.username);\n    } else {\n      header = '';\n    }\n\n    return React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, header, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"Enter your name :\"), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.myChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(MyForm, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 376\n  },\n  __self: this\n}), document.getElementById('root')); // ReactDOM.render(<Card />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();","map":{"version":3,"sources":["/Users/gmv/Documents/myfirstreact/src/index.js"],"names":["React","Fragment","ReactDOM","Card","Myform","Component","constructor","props","myChangeHandler","event","setState","username","target","value","state","render","header","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CACA;AACA;;AACA,OAAOC,IAAP,MAAiB,8BAAjqBJ,KAAK,CAACK,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAKnBC,eALmB,GAKAC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAAxB,OAAd;AACH,KAPkB;;AAEf,SAAKC,KAAL,GAAa;AAAEH,MAAAA,QAAQ,EAAG;AAAb,KAAb;AACH;;AAMDI,EAAAA,MAAM,GAAG;AACL,QAAIC,MAAM,GAAG,EAAb;;AACA,QAAG,KAAKF,KAAL,CAAWH,QAAd,EAAuB;AACnBK,MAAAA,MAAM,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAW,KAAKF,KAAL,CAAWH,QAAtB,CAAT;AACH,KAFD,MAEO;AACHK,MAAAA,MAAM,GAAG,EAAT;AACH;;AAED,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,MADL,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFJ,EAGI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,QAAQ,EAAE,KAAKR,eAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ;AAUH;;AA5BgC;;AAgCrCN,QAAQ,CAACa,MAAT,CAAgB,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA4BE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA5B,E,CACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\n//import App from './App.css';\nimport Card from './components/components/Card';\n// import * as serviceWorker from './serviceWorker';\n\n// const mysFirstElemennt = <h1>Hello React!</h1>\n// const myelement = (\n//     <table>\n//         <tr>\n//             <th>Name</th>\n//         </tr>\n//         <tr>\n//             <td>John</td>\n//         </tr>\n//         <tr>\n//             <td>Elsa</td>\n//         </tr>\n//     </table>\n// );\n\n// //use JSX\n\n// const myelement = <h1>I love JSX!</h1>\n\n//use non-JSX\n\n// const myelement = React.createElement('h1', {}, 'I dont use JSX!');\n// expression in JSX\n// const myelement = <h1>React is {5 + 5} times better with JSX</h1>\n\n// insert a large block HTML\n// const myelement = (\n//     <ul>\n//         <li>Apples</li>\n//         <li>Bananas</li>\n//         <li>Cherries</li>\n//     </ul>\n// );\n\n//one Top Level Element\n// const myelement = (\n//     <div>\n//         <h1>I am a Header.</h1>\n//         <h1>I am a Header too.</h1>\n//     </div>\n// );\n\n// element Must be CLose -> close empty element with /> if not that is error \n// i.e :\n\n//const myelement = <input type=\"text\">\n\n//it's mus be like this: \n// const myelement = <input type=\"text\"/>\n\n// function Car(){\n//     return <h2>Hi, I am also a Car!</h2>\n// }\n\n// class Car extends React.Component{\n//     constructor(){\n//         super();\n//         this.state = {color: \"red\"};\n//     }\n\n//     render(){\n//     return <h2>I am a {this.state.color} Car!</h2>\n//     }\n// }\n\n// class Car extends React.Component{\n//     render() {\n//         return <h2>I am a {this.props.color} Car!</h2>\n//     }\n// }\n\n// class Car extends React.Component{\n//     render() {\n//         return <h2>I am a Car!</h2>\n//     }\n// }\n\n// class Garage extends React.Component {\n//     render(){\n//         return (\n//             <div>\n//                 <h1>Who lives in my Garage?</h1>\n//                 <Car />\n//             </div>\n//         );\n//     }\n// }\n\n// class Car extends React.Component{\n//     render(){\n//         return <h2>I am a {this.props.brand}!</h2>\n//     }\n// }\n\n// const myelement = <Car brand=\"Ford\" />\n\n// class Card extends React.Component{\n//     render(){\n//         return <h1>ini Card</h1>\n//     }\n// }\n\n// class Myheader extends React.Component {\n//     render(){\n//         return (\n//             <div>\n//                 <h1 style={{backgroundColor: \"lightblue\"}}>Hello Style!</h1>\n//                 <p>add a little style!</p>\n//             </div>\n//         );\n//     }\n// }\n\n// class Myheader extends React.Component{\n//     render (){\n//     //     const mystyle = {\n//     //         color : \"white\",\n//     //         backgroundColor: \"DodgerBlue\",\n//     //         padding : \"10px\",\n//     //         fontFamily : \"Arial\"\n//     //     }\n\n//         return (\n//             <div>\n//                 <h1>Hello Style!</h1>\n//                 <p>add a little style!</p>\n//             </div>\n//         )\n//     }\n// }\n\n// class Car extends React.Component{\n//     render (){\n//         return <h2>I am a {this.props.brand}!</h2>\n//     }\n// }\n\n// const myelement = <Car brand=\"Ford\" />\n\n// class Car extends React.Component{\n//     render (){\n//         return <h2>I am a {this.props.brand}!</h2>\n//     }\n// }\n\n// class Garage extends React.Component {\n//     render(){\n//         return(\n//             <div>\n//                 <h1>Whi lives in my garage?</h1>\n//                 <Car brand=\"Ford\" />\n//             </div>\n//         );\n//     }\n// }\n\n// class Car extends React.Component{\n//     render (){\n//         return <h2>I am a {this.props.brand}!</h2>\n//     }\n// }\n\n// class Garage extends React.Component {\n//     render() {\n//         const carname =  \"Ford\";\n//         return (\n//             <div>\n//                 <h1>Who live in my garage?</h1>\n//                 <Car brand={carname} />\n//             </div>\n//         );\n//     }\n// }\n\n// class Car extends React.Component {\n//     render(){\n//         return <h2>I am a {this.props.brand.name}!</h2>\n//     }\n// }\n\n// class Garage extends React.Component {\n//     render(){\n//         const carinfo = {name : \"Ford\", model: \"Mustang\"};\n//         return(\n//             <div>\n//                 <h1>Who lives in my garage?</h1>\n//                 <Car brand={carinfo}/>\n//             </div>\n\n//         );\n//     }\n// }\n\n// class Car extends React.Component {\n//     constructor (props) {\n//         super (props);\n//     }\n\n//     render(){\n//     return <h2>I am a {this.props.model} !</h2>\n//     }\n// }\n\n// class Car extends React.Component {\n//     constructor (props) {\n//         super (props);\n//         this.state = {\n//             brand : \"Ford\",\n//             model : \"Mustang\",\n//             color : \"red\",\n//             year : 1964\n//         };\n//     }\n\n//     render(){\n//     return (\n//         <div>\n//             <h1>My {this.state.brand}</h1>\n//             <p>\n//                 it is a {this.state.color} <br />\n//                 {this.state.model} <br />\n//                 from {this.state.year}.\n//             </p>\n//         </div>\n//         );\n//     }\n// }\n\n// class Car extends React.Component {\n//     constructor (props) {\n//         super (props);\n//         this.state = {\n//             brand : \"Ford\",\n//             model : \"Mustang\",\n//             color : \"red\",\n//             year : 1964\n//         };\n//     }\n\n//     changeColor = () => {\n//         this.setState({color: \"blue\"});\n//     }\n\n//     render(){\n//     return (\n//         <div>\n//             <h1>My {this.state.brand}</h1>\n//             <p>\n//                 it is a {this.state.color} <br />\n//                 {this.state.model} <br />\n//                 from {this.state.year}.\n//             </p>\n//             <button type=\"button\" onClick={this.changeColor}>\n//                 Change Color\n//             </button>\n//         </div>\n//         );\n//     }\n// }\n\n// class Header extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {favoritecolor: \"red\"};\n//     }\n\n//     static getDerivedStateFromProps(props, state){\n//         return {favoritecolor: props.favcol};\n//     }\n\n//     render(){\n//         return (\n//             <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//         );\n//     }\n// }\n\n// class Header extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {favoritecolor: \"red\"};\n//     }\n\n//     componentDidMount(){\n//         setTimeout( () => {\n//             this.setState({favoritecolor: \"yellow\"})\n//         }, 1000 )\n//     }\n\n//     render(){\n//         return (\n//             <h1>My Favorite Color is {this.state.favoritecolor}</h1>\n//         );\n//     }\n// }\n\n// class  MyForm extends React.Component {\n//     render() {\n//         return (\n//             <form>\n//                 <h1>Hello</h1>\n//                 <p>Enter Your Name : </p>\n//                 <input \n//                     type=\"text\"\n//                 />\n//             </form>\n//         );\n//     }\n// }\n\n// class MyForm extends React.Component {\n//     constructor(props) {\n//             super(props) ;\n//             this.state =  {username: ''};\n//         }\n\n//         myChangeHandler = (event) => {\n//             this.setState({username: event.target.value});\n//         }\n\n//         render(){\n//             return(\n//                 <form>\n//                     <h1>Hello {this.state.username}</h1>\n//                     <p>Enter your name :</p>\n\n//                     <input \n//                         type='tect'\n//                         onChange={this.myChangeHandler}\n//                     />\n//                 </form>\n//             );\n        \n//          }\n//     }\n\nclass Myform extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { username : ''};\n    }\n\n    myChangeHandler = (event) => {\n        this.setState({username: event.target.value});\n    }\n\n    render() {\n        let header = '';\n        if(this.state.username){\n            header = <h1>Hello {this.state.username}</h1>;\n        } else {\n            header = '';\n        }\n\n        return (\n            <form>\n                {header}\n                <p>Enter your name :</p>\n                <input\n                    type='text'\n                    onChange={this.myChangeHandler}\n                />\n            </form>\n        );\n    }\n}\n\n\nReactDOM.render(<MyForm />, document.getElementById('root'));\n// ReactDOM.render(<Card />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}